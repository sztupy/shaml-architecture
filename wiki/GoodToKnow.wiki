#summary Things that you might want to know.

= Changes from S#arp-architecture =

The project is based on a pre-RTM revision of s#arp-architecture, with the following changes:

 * The support library's names are Shaml, instead of !SharpArch
 * The structure of both the support library and the default web application solution is [TreeListing simplified] to ease compiling under mono (one assembly per application)
 * Shaml uses NHibernate 2.0.1GA because the 2.1.0beta had some problems running under mono with Flulent NHibernate.
 * Shaml doesn't depend on Castle.Windsor and Microsoft.!ServiceLocator because they don't work under mono.
  * The controllers still support DI, but this is only used when testing
  * Because !ServerLocator is not included the base frameworks used are hard-coded (NHibernate and NUnit)
 * Shaml uses PostgreSQL databases by default
  * Npgsql and the !NauckIt providers are included by default.
  * Membership, Role, Session and Profile services are defaulted to use the !NauckIt provider
 * Built-in optionated OpenID support
  * Uses !DotNetOpenAuth 3.1 (mono2 branch with some [http://github.com/sztupy/dotnetopenid/tree/mono2 hotfixes] not yet avaialable in the official distribution)
  * Uses a modified Membership provider based to support multiple OpenID's per one identity
 * NHaml is the default view engine (latest revision from source with some hotfixes to work under mono)
  * !AreaView engine is still supported
 * Uses the [http://compass-style.org Compass] stylesheet framework to build css stylesheets
 * Uses a ruby based tool to create the CRUD scaffolds instead of !T4Toolkit

= Database =

S#aml-architecture uses PostgreSQL databases to store both the domain and the membership/role data. You have to configure the database access both inside Web.config and NHibernate.config for them to work. In the db directory after each run, the application will generate the "CREATE TABLE" commands you need to run for the schema to be avaialable. This directory also contains the schema file you have to import for the Membership/Role provider.

= Membership/Role/Profile/Session =

Shaml uses the !NauckIt.PostgreSQL provider to store these kinds of information. It also has a domain class called User, that maps to the same data, if you need to access the user informations from NHibernate. Shaml.Core also contains a modified Membership provider you might use (it is used by default) if you want to store multiple OpenID identities to a single user.

= Compass =

Compass is an Sass based CSS framework. Shaml uses compass as a post-processor of stylesheet files (the default project file will run `compass --update` after each run, so you don't have to). Read more about compass at http://compass-style.org

= NHaml =

Shaml uses the latest NHaml as the default View Engine. You can of course switch back to aspx pages if you want, just don't forget to add the default view engine in the global.aspx.cs file.